## werkzeug

import pytest
from app import db
from werkzeug.security import generate_password_hash
from yourapp import User  # Replace 'yourapp' with the actual app module name

@pytest.fixture
def new_user():
    # Create a new User instance for testing
    user = User(username='testuser')
    user.set_password('testpassword')
    db.session.add(user)
    db.session.commit()
    return user

def test_set_password(new_user):
    # Check if the password is hashed correctly
    assert new_user.password_hash != 'testpassword'  # Password should be hashed
    assert generate_password_hash('testpassword') != new_user.password_hash  # Check the hash is generated correctly

def test_check_password(new_user):
    # Test that the check_password function correctly checks the password
    assert new_user.check_password('testpassword') is True  # Correct password
    assert new_user.check_password('wrongpassword') is False  # Incorrect password


## bcrypt

import pytest
import bcrypt
from app import db
from yourapp import User  # Replace 'yourapp' with the actual app module name

@pytest.fixture
def new_user():
    # Create a new User instance for testing
    user = User(username='testuser')
    user.set_password('testpassword')
    db.session.add(user)
    db.session.commit()
    return user

def test_set_password(new_user):
    # Check if the password is hashed correctly
    assert new_user.password_hash != 'testpassword'  # The password should be hashed
    # Ensure the hashed password is generated by bcrypt
    assert bcrypt.checkpw('testpassword'.encode('utf-8'), new_user.password_hash.encode('utf-8'))

def test_check_password(new_user):
    # Test that the check_password function correctly checks the password
    assert new_user.check_password('testpassword') is True  # Correct password
    assert new_user.check_password('wrongpassword') is False  # Incorrect password


## hashlib

import pytest
import hashlib
import os
from app import db
from yourapp import User  # Replace 'yourapp' with the actual app module name

@pytest.fixture
def new_user():
    # Create a new User instance for testing
    user = User(username='testuser')
    user.set_password('testpassword')
    db.session.add(user)
    db.session.commit()
    return user

def test_set_password(new_user):
    # Check if the password is hashed correctly and salt is stored
    assert new_user.password_hash != 'testpassword'  # The password should be hashed
    assert new_user.salt is not None  # Salt should be generated and stored
    # Recreate the hash using the stored salt and compare it with the stored password hash
    password_hash = hashlib.sha256(('testpassword' + new_user.salt).encode('utf-8')).hexdigest()
    assert new_user.password_hash == password_hash  # Check if the hashes match

def test_check_password(new_user):
    # Test that the check_password function correctly checks the password
    assert new_user.check_password('testpassword') is True  # Correct password
    assert new_user.check_password('wrongpassword') is False  # Incorrect password



#### api

import pytest
from flask import Flask
from flask.testing import FlaskClient
from app import db
from app.models import User
from app import create_app

@pytest.fixture
def app():
    # Create and configure a new app instance for testing
    app = create_app('testing')  # Assuming a 'testing' config exists
    with app.app_context():
        db.create_all()  # Create the tables
    yield app
    with app.app_context():
        db.drop_all()  # Drop the tables after tests

@pytest.fixture
def client(app: Flask):
    return app.test_client()

@pytest.fixture
def user(app: Flask):
    # Create a test user in the database
    user = User(username='testuser')
    user.set_password('testpassword')
    db.session.add(user)
    db.session.commit()
    return user

def test_login_success(client: FlaskClient, user):
    # Test for successful login
    response = client.post('/login', json={
        'username': 'testuser',
        'password': 'testpassword'
    })
    assert response.status_code == 200
    data = response.get_json()
    assert data['success'] is True
    assert data['message'] == 'Login successful'

def test_login_invalid_username(client: FlaskClient):
    # Test for invalid username
    response = client.post('/login', json={
        'username': 'invaliduser',
        'password': 'testpassword'
    })
    assert response.status_code == 401
    data = response.get_json()
    assert data['success'] is False
    assert data['message'] == 'Invalid username or password'

def test_login_invalid_password(client: FlaskClient, user):
    # Test for invalid password
    response = client.post('/login', json={
        'username': 'testuser',
        'password': 'wrongpassword'
    })
    assert response.status_code == 401
    data = response.get_json()
    assert data['success'] is False
    assert data['message'] == 'Invalid username or password'

def test_login_missing_data(client: FlaskClient):
    # Test for missing data (username or password)
    response = client.post('/login', json={})
    assert response.status_code == 500
    data = response.get_json()
    assert data['success'] is False
    assert 'message' in data  # Expecting error message in the response
