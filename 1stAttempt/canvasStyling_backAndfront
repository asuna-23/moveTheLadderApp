# back

from flask import Flask, Blueprint, jsonify
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from yourmodels import Rectangle  # Import your SQLAlchemy models

app = Flask(__name__)
blueprint = Blueprint('api', __name__)

# Database configuration
DATABASE_URI = 'postgresql://user:password@localhost/yourdatabase'
engine = create_engine(DATABASE_URI)
Session = sessionmaker(bind=engine)
session = Session()

# Helper function to map operatingStatus to color
def get_status_color(status):
    mapping = {
        'running': 'green',
        'in preparation': 'yellow',
        'stop': 'red'
    }
    return mapping.get(status.lower(), 'gray')

# API endpoint
@blueprint.route('/api/rectangles', methods=['GET'])
def get_rectangles():
    rectangles = session.query(Rectangle).all()
    response = []
    for rect in rectangles:
        response.append({
            'id': rect.id,
            'x': rect.x,
            'y': rect.y,
            'width': rect.width,
            'height': rect.height,
            'color': get_status_color(rect.operating_status),
            'label': rect.id
        })
    return jsonify(response)

app.register_blueprint(blueprint)


// front

export default {
  data() {
    return {
      rectangles: [] // Placeholder for API data
    };
  },
  async mounted() {
    const canvas = this.$refs.myCanvas;
    const ctx = canvas.getContext('2d');

    // Fetch the data from the API
    const apiResponse = await fetch("https://your-api-url.com/api/rectangles");
    const apiData = await apiResponse.json();

    // Populate the rectangles array with the API response
    this.rectangles = apiData;

    // Helper function to draw a circle for the label
    const drawCircleLabel = (ctx, x, y, radius, label, fillStyle, strokeStyle) => {
      ctx.beginPath();
      ctx.arc(x, y, radius, 0, Math.PI * 2);
      ctx.closePath();
      ctx.fillStyle = fillStyle;
      ctx.fill();
      ctx.strokeStyle = strokeStyle;
      ctx.lineWidth = 2;
      ctx.stroke();

      ctx.font = 'bold 14px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = 'black';
      ctx.fillText(label, x, y);
    };

    // Draw the rectangles based on the API response
    this.rectangles.forEach(rect => {
      // Draw the rectangle
      ctx.fillStyle = rect.color;
      ctx.fillRect(rect.x, rect.y, rect.width, rect.height);

      // Draw the label using the rectangle's `label`
      const circleX = rect.x + rect.width / 2; // Circle center X
      const circleY = rect.y + rect.height / 2; // Circle center Y
      drawCircleLabel(ctx, circleX, circleY, 15, rect.label, 'white', 'black');
    });
  }
};


############### pytest

import pytest
from flask import Flask
from unittest.mock import MagicMock, patch
from yourflaskapp import app, get_status_color  # Import your Flask app and helper function

@pytest.fixture
def client():
    """Fixture to provide a test client for the Flask app."""
    with app.test_client() as client:
        yield client

def test_get_status_color():
    """Test the `get_status_color` helper function."""
    assert get_status_color('running') == 'green'
    assert get_status_color('in preparation') == 'yellow'
    assert get_status_color('stop') == 'red'
    assert get_status_color('unknown') == 'gray'  # Default case

@patch('yourflaskapp.session')
def test_get_rectangles(mock_session, client):
    """Test the `/api/rectangles` endpoint."""
    # Mock the database query result
    mock_session.query.return_value.all.return_value = [
        MagicMock(id=1, x=10, y=20, width=100, height=50, operating_status='running'),
        MagicMock(id=2, x=30, y=40, width=120, height=60, operating_status='stop'),
        MagicMock(id=3, x=50, y=60, width=140, height=70, operating_status='in preparation')
    ]

    # Make the GET request to the API
    response = client.get('/api/rectangles')
    assert response.status_code == 200

    # Parse the JSON response
    data = response.get_json()
    assert len(data) == 3

    # Validate the contents of the response
    assert data[0] == {
        'id': 1,
        'x': 10,
        'y': 20,
        'width': 100,
        'height': 50,
        'color': 'green',
        'label': 1
    }
    assert data[1] == {
        'id': 2,
        'x': 30,
        'y': 40,
        'width': 120,
        'height': 60,
        'color': 'red',
        'label': 2
    }
    assert data[2] == {
        'id': 3,
        'x': 50,
        'y': 60,
        'width': 140,
        'height': 70,
        'color': 'yellow',
        'label': 3
    }


/////////// jest test

import { shallowMount } from '@vue/test-utils';
import MyComponent from '@/components/MyComponent.vue';

global.fetch = jest.fn(); // Mock the fetch function

describe('MyComponent', () => {
  let mockRectangles;

  beforeEach(() => {
    // Mock API response
    mockRectangles = [
      { id: 1, x: 10, y: 20, width: 100, height: 50, color: 'green', label: '1' },
      { id: 2, x: 150, y: 200, width: 120, height: 60, color: 'red', label: '2' },
    ];

    // Mock the fetch response
    fetch.mockResolvedValue({
      json: jest.fn().mockResolvedValue(mockRectangles),
    });
  });

  afterEach(() => {
    jest.clearAllMocks(); // Clear mocks after each test
  });

  it('fetches rectangles data and renders them on the canvas', async () => {
    // Create a mock canvas context
    const mockCtx = {
      fillStyle: '',
      fillRect: jest.fn(),
      beginPath: jest.fn(),
      arc: jest.fn(),
      closePath: jest.fn(),
      fill: jest.fn(),
      strokeStyle: '',
      lineWidth: 0,
      stroke: jest.fn(),
      font: '',
      textAlign: '',
      textBaseline: '',
      fillText: jest.fn(),
    };

    // Shallow mount the component
    const wrapper = shallowMount(MyComponent, {
      mocks: {
        $refs: {
          myCanvas: {
            getContext: jest.fn().mockReturnValue(mockCtx),
          },
        },
      },
    });

    // Wait for the component to finish loading data
    await flushPromises(); // Ensures all promises are resolved

    // Check that fetch was called once
    expect(fetch).toHaveBeenCalledWith('https://your-api-url.com/api/rectangles');

    // Verify rectangles data was set
    expect(wrapper.vm.rectangles).toEqual(mockRectangles);

    // Verify the canvas drawing functions were called
    mockRectangles.forEach((rect) => {
      // Check rectangle drawing
      expect(mockCtx.fillStyle).toBe(rect.color);
      expect(mockCtx.fillRect).toHaveBeenCalledWith(rect.x, rect.y, rect.width, rect.height);

      // Check circle label drawing
      const circleX = rect.x + rect.width / 2;
      const circleY = rect.y + rect.height / 2;
      expect(mockCtx.beginPath).toHaveBeenCalled();
      expect(mockCtx.arc).toHaveBeenCalledWith(circleX, circleY, 15, 0, Math.PI * 2);
      expect(mockCtx.fill).toHaveBeenCalled();
      expect(mockCtx.stroke).toHaveBeenCalled();
      expect(mockCtx.fillText).toHaveBeenCalledWith(rect.label, circleX, circleY);
    });
  });
});
