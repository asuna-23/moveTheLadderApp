<template>
  <v-table class="custom-table">
    <thead>
      <tr>
        <th
          v-for="(header, columnIndex) in headers"
          :key="columnIndex"
          v-bind="header.directives"
          id="custom-header"
        >
          <common-label :item="header" class="text-h5 font-weight-bold"></common-label>
        </th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="(row, rowIndex) in rows" :key="rowIndex">
        <td
          v-for="(cell, columnIndex) in row"
          :key="columnIndex"
          v-bind="cell.directives"
          id="custom-row"
        >
          <common-label
            :item="{
              ...cell,
              columnIndex: columnIndex,
              display: {
                label: displayColumnLabel(cell.display.label, columnIndex),
              },
            }"
          ></common-label>
        </td>
      </tr>
    </tbody>
  </v-table>
</template>

<script>
import CommonLabel from './CommonLabel.vue'

export default {
  name: 'CommonTable',
  components: { CommonLabel },
  props: {
    headers: {
      type: Array, // Expecting an array of header objects
      required: true,
    },
    rows: {
      type: Array, // Expecting an array of arrays for rows and cells
      required: true,
    },
    firstColumn: {
      type: Object,
    },
    secondColumn: {
      type: Object,
    },
    thirdColumn: {
      type: Object,
    },
  },
  methods: {
    displayColumnLabel(label, columnIndex) {
      const columns = [this.firstColumn, this.secondColumn, this.thirdColumn];
      const column = columns[columnIndex];
      if (column && (column.value || column.value === 0)) {
        return `${column.value} ${column.symbol || ''}`;
      }
      return label;
    },
  },
}
</script>

<style scoped>
.custom-table th {
  border: 1px solid rgb(204, 204, 204);
  background-color: #2e2e2e;
  color: #ffffff;
  width: 30rem;
}

.custom-table td {
  border: 1px solid rgb(204, 204, 204);
  background-color: #3a3a3a;
  color: #ffffff;
}

#custom-header {
  border-color: rgb(204, 204, 204);
  height: 2.6rem;
  text-align: center;
  font-weight: bolder;
}

#custom-row {
  border-color: rgb(204, 204, 204);
  height: 2.5rem;
  text-align: center;
  font-weight: bolder;
}
</style>


//////////////////// test

// Import or mock the component where the method exists
// Assuming the method is part of a component or class, adjust accordingly
import { shallowMount } from '@vue/test-utils';
import YourComponent from '@/path/to/YourComponent.vue';

describe('displayColumnLabel', () => {
  let wrapper;

  beforeEach(() => {
    wrapper = shallowMount(YourComponent, {
      data() {
        return {
          firstColumn: { value: 100, symbol: '$' },
          secondColumn: { value: 200 },
          thirdColumn: { value: 0, symbol: '%' },
        };
      },
    });
  });

  test('returns value and symbol for a valid column', () => {
    const result = wrapper.vm.displayColumnLabel('Default Value', 0);
    expect(result).toBe('100 $');
  });

  test('returns value without symbol for a valid column', () => {
    const result = wrapper.vm.displayColumnLabel('Default Value', 1);
    expect(result).toBe('200');
  });

  test('handles value of 0 correctly', () => {
    const result = wrapper.vm.displayColumnLabel('Default Value', 2);
    expect(result).toBe('0 %');
  });

  test('returns default cell value for an invalid column index', () => {
    const result = wrapper.vm.displayColumnLabel('Default Value', 3);
    expect(result).toBe('Default Value');
  });

  test('returns default cell value when column is undefined', () => {
    wrapper.setData({
      secondColumn: undefined, // Simulate an undefined column
    });
    const result = wrapper.vm.displayColumnLabel('Default Value', 1);
    expect(result).toBe('Default Value');
  });
});
