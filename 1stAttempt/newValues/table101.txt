// CommonTable.vue

<template>
  <v-table class="custom-table">
    <thead>
      <tr v-if="itemTable.TABLE_HEADER.length">
        <th
          v-for="(column, columnIndex) in itemTable.TABLE_HEADER"
          :key="columnIndex"
          v-bind="column.directives"
          class="custom-header"
        >
          <common-label :item="column" class="text-h5 font-weight-bold"></common-label>
        </th>
      </tr>
    </thead>
    <tbody>
      <tr v-if="itemTable.TABLE_ROW.length">
        <td
          v-for="(column, columnIndex) in itemTable.TABLE_ROW"
          :key="columnIndex"
          v-bind="column.directives"
          class="custom-row"
        >
          <common-label
            :item="{
              ...column,
              columnIndex: columnIndex,
              display: {
                label: displayColumnLabel(column.display.label, columnIndex),
              },
            }"
          ></common-label>
        </td>
      </tr>
      <tr v-else>
        <td colspan="3" class="text-center">No data available</td>
      </tr>
    </tbody>
  </v-table>
</template>

<script>
import CommonLabel from './CommonLabel.vue';

export default {
  name: 'CommonTable',
  components: { CommonLabel },
  props: {
    itemTable: {
      type: Object,
      required: true,
    },
  },
  methods: {
    generateLabel(column, label) {
      if (!column || column.value <= 0 || column.value === '') {
        return label;
      }
      return `${column.value} ${column.symbol}`;
    },
    displayColumnLabel(label, columnIndex) {
      const columnProps = [
        this.itemTable.firstColumn,
        this.itemTable.secondColumn,
        this.itemTable.thirdColumn,
      ];
      const column = columnProps[columnIndex];
      return this.generateLabel(column, label);
    },
  },
};
</script>

<style scoped>
.custom-table th {
  border: 1px solid rgb(204, 204, 204);
  background-color: #2e2e2e;
  color: #ffffff;
  width: 30rem;
}

.custom-table td {
  border: 1px solid rgb(204, 204, 204);
  background-color: #3a3a3a;
  color: #ffffff;
}

.custom-header {
  border-color: rgb(204, 204, 204);
  height: 2.6rem;
  text-align: center;
  font-weight: bolder;
}

.custom-row {
  border-color: rgb(204, 204, 204);
  height: 2.5rem;
  text-align: center;
  font-weight: bolder;
}
</style>


----------

// ProcessInformationScreen.vue

<template>
  <v-container fluid>
    <v-row>
      <v-col>
        <ProductionLine :itemTable="productLineTable" />
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import ProductionLine from '@/components/pages/ProcessInformationScreen/ProductionLine.vue'
import { PROUDUCT_LINE_TABLE } from '@/utility/rTables'
import { FetchAPI } from '@/utility/apiRequest'

export default {
  name: 'ProcessInformationScreen',
  components: { ProductionLine },
  data() {
    return {
      productLineTable: JSON.parse(JSON.stringify(PROUDUCT_LINE_TABLE)), // Deep clone to prevent mutation
      reference_CT: 0,
      operation_information: [],
      incremented_units: 0,
      incrementInterval: null,
      nonDefectiveProducts: 0,
      working_rate: 0,
    }
  },
  async mounted() {
    await this.fetchAllOperations()
    await this.fetchReferenceCT()
  },
  methods: {
    async fetchAllOperations() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-all-operations')
        this.operation_information = [...response.data]
        this.nonDefectiveProducts = this.operation_information[this.operation_information.length - 1]?.non_defective_products || 0
        this.initializeIncrementer()
      } catch (error) {
        console.error(error)
      }
    },
    async fetchReferenceCT() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-ref-cycle-time')
        if (response.success) {
          this.reference_CT = (response.data[0]?.reference_cycle_time || 2) * 1000
          this.restartIncrementer()
        }
      } catch (error) {
        console.error(error)
      }
    },
    initializeIncrementer() {
      const lastOperation = this.operation_information[this.operation_information.length - 1]
      if (lastOperation) {
        this.incremented_units = lastOperation.planned_number_units || 0
        this.startIncrementer()
      }
    },
    startIncrementer() {
      this.clearIncrementer()
      if (this.operation_information.length && this.reference_CT) {
        this.incrementInterval = setInterval(() => {
          this.incremented_units++
          this.updatePlannedUnits()
          this.calculateWorkingRate()
          this.updateTableValues()
        }, this.reference_CT)
      }
    },
    clearIncrementer() {
      if (this.incrementInterval) clearInterval(this.incrementInterval)
    },
    async updatePlannedUnits() {
      try {
        const api = new FetchAPI()
        const lastOperation = this.operation_information[this.operation_information.length - 1]
        if (lastOperation) {
          const payload = { planned_number_units: this.incremented_units }
          await api.put(`/api/update-units/${lastOperation.process_id}`, payload)
        }
      } catch (error) {
        console.error(error)
      }
    },
    calculateWorkingRate() {
      this.working_rate = ((this.nonDefectiveProducts / this.incremented_units) * 100).toFixed(2)
    },
    updateTableValues() {
      // Update the rows dynamically
      this.productLineTable.TABLE_ROW[0].display.label = `${this.incremented_units} 台`
      this.productLineTable.TABLE_ROW[1].display.label = `${this.nonDefectiveProducts} 台`
      this.productLineTable.TABLE_ROW[2].display.label = `${this.working_rate} %`
    },
  },
}
</script>


------------

// ProductionLine.vue

<template>
  <CommonTable :itemTable="itemTable" />
</template>

<script>
import CommonTable from '@/components/common/CommonTable.vue'

export default {
  name: 'ProductionLine',
  components: { CommonTable },
  props: {
    itemTable: {
      type: Object,
      required: true,
    },
  },
}
</script>


--------

// rTables

const PROUDUCT_LINE_TABLE = {
  TABLE_HEADER: [
    { COMPONENT_NAME: 'CommonLabel', display: { label: '計画台数(累計)' } },
    { COMPONENT_NAME: 'CommonLabel', display: { label: '生産台数(累計)' } },
    { COMPONENT_NAME: 'CommonLabel', display: { label: '稼働率' } },
  ],
  TABLE_ROW: [
    { COMPONENT_NAME: 'CommonLabel', display: { label: '-' } },
    { COMPONENT_NAME: 'CommonLabel', display: { label: '-' } },
    { COMPONENT_NAME: 'CommonLabel', display: { label: '-' } },
  ],
}

